{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC5BC,YAAY,WACRN,EACFI,EAAST,EAAAY,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,QAEpEM,EAAKV,EAAAY,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,O,GAElEA,E,IAbUY,SAASC,cAAc,SAE/BC,iBAAiB,UAexB,SAA+BC,GAC7B,IAAIhB,EAAW,EACfgB,EAAMC,iBACN,IAAIhB,EAAQiB,OAAOF,EAAMG,OAAOC,SAASnB,MAAMoB,OACzCC,EAAOJ,OAAOF,EAAMG,OAAOC,SAASE,KAAKD,OACzCE,EAASL,OAAOF,EAAMG,OAAOC,SAASG,OAAOF,OAEjD,IAAKG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAC7BzB,EAAcC,EAAUC,GAAOwB,OAAOC,QACtC1B,GAAY,EACZC,GAASqB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit',operatingWithPromises)\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise( (resolve, reject) =>{\n    setTimeout( () =>{\n    if (shouldResolve) {\n      resolve( Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n    } else {\n      reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n    }\n  }, delay)\n})\n}\n\nfunction operatingWithPromises(event){\n  let position = 1;\n  event.preventDefault(); \n  let delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n\n    for( i = 0; i < amount; i += 1){\n    createPromise(position, delay).then().catch();\n    position += 1;\n    delay += step;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Notify","success","concat","failure","document","querySelector","addEventListener","event","preventDefault","Number","target","elements","value","step","amount","i","then","catch"],"version":3,"file":"03-promises.980ada4e.js.map"}